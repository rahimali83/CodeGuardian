# Custom Rule Example: AWS Credentials Detection
# This rule detects hardcoded AWS credentials in source code

rule_id: CUSTOM-AWS-001
title: "Hardcoded AWS Credentials"
description: |
  Detects hardcoded AWS credentials including Access Key IDs, Secret Access Keys,
  and Session Tokens in source code. AWS credentials should never be committed to
  version control and should be managed through IAM roles, environment variables,
  or AWS Secrets Manager.

severity: CRITICAL
category: security
cwe: CWE-798
owasp: "A07:2021 - Identification and Authentication Failures"

compliance:
  - framework: PCI_DSS
    requirement: "8.2.1"
    description: "Do not use vendor-supplied defaults for system passwords and other security parameters"

  - framework: SOC2
    requirement: "CC6.1"
    description: "The entity implements logical access security software, infrastructure, and architectures over protected information assets"

  - framework: NIST_CSF
    requirement: "PR.AC-1"
    description: "Identities and credentials are issued, managed, verified, revoked, and audited"

detection:
  # AWS Access Key ID pattern
  patterns:
    - pattern: 'AKIA[0-9A-Z]{16}'
      description: "AWS Access Key ID format"
      confidence: 0.95

    - pattern: '(aws_access_key_id|AWS_ACCESS_KEY_ID|accessKeyId)\s*[:=]\s*["\']?AKIA[0-9A-Z]{16}["\']?'
      description: "AWS Access Key ID in configuration"
      confidence: 0.98

    - pattern: '(aws_secret_access_key|AWS_SECRET_ACCESS_KEY|secretAccessKey)\s*[:=]\s*["\'][A-Za-z0-9/+=]{40}["\']'
      description: "AWS Secret Access Key (40 characters)"
      confidence: 0.85

    - pattern: '(aws_session_token|AWS_SESSION_TOKEN|sessionToken)\s*[:=]\s*["\'][A-Za-z0-9/+=]{100,}["\']
      description: "AWS Session Token"
      confidence: 0.85

    - pattern: 'AWSAccessKeyId=[A-Z0-9]{20}'
      description: "AWS Access Key in URL parameter"
      confidence: 0.95

  # Dangerous function calls
  function_calls:
    - "boto3.client"
    - "boto3.resource"
    - "AWS.config.update"

  # Check for AWS SDK initialization with credentials
  exact_strings:
    - "aws_access_key_id="
    - "aws_secret_access_key="

scope:
  file_patterns:
    - "**/*.py"
    - "**/*.js"
    - "**/*.java"
    - "**/*.go"
    - "**/*.rb"
    - "**/*.php"
    - "**/*.ts"
    - "**/*.yml"
    - "**/*.yaml"
    - "**/*.json"
    - "**/*.env"
    - "**/*.conf"
    - "**/*.config"

  exclude:
    - "**/test/**"
    - "**/tests/**"
    - "**/*.test.*"
    - "**/*.spec.*"
    - "**/node_modules/**"
    - "**/vendor/**"

  languages:
    - python
    - javascript
    - typescript
    - java
    - go
    - ruby
    - php

context:
  check_comments: true
  check_strings: true
  check_variable_names: true

false_positive_indicators:
  - pattern: 'example|sample|dummy|placeholder|test|mock|fake|YOUR_ACCESS_KEY|AKIAIOSFODNN7EXAMPLE'
    description: "Example or placeholder credentials from AWS documentation"

suppression_comment: "# nosec: aws-credentials"

remediation:
  description: |
    Remove hardcoded AWS credentials from source code immediately. AWS credentials
    should never be committed to version control. Use one of the recommended approaches:

  steps:
    - "Immediately revoke the exposed credentials in AWS IAM Console"
    - "Remove hardcoded credentials from source code"
    - "Use IAM roles for EC2, ECS, Lambda, and other AWS services"
    - "Use AWS Secrets Manager or Systems Manager Parameter Store for applications"
    - "Store credentials in environment variables (for local development only)"
    - "Use AWS CLI credential profiles (~/.aws/credentials)"
    - "Add credential files to .gitignore"
    - "Scan git history for exposed credentials and consider rotating"

  best_practices:
    - "Use IAM roles wherever possible (EC2 instance roles, ECS task roles, Lambda execution roles)"
    - "Enable MFA for AWS Console access"
    - "Implement principle of least privilege for IAM policies"
    - "Rotate credentials regularly"
    - "Use AWS Organizations SCPs to prevent credential exposure"
    - "Enable AWS CloudTrail for credential usage monitoring"

  code_examples:
    - language: python
      insecure: |
        # INSECURE - Hardcoded AWS credentials
        import boto3

        client = boto3.client(
            's3',
            aws_access_key_id='AKIAIOSFODNN7EXAMPLE',
            aws_secret_access_key='wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
            region_name='us-east-1'
        )

      secure: |
        # SECURE - Using IAM role (preferred for AWS services)
        import boto3

        # No credentials needed - will use IAM role attached to EC2/ECS/Lambda
        client = boto3.client('s3', region_name='us-east-1')

        # Or, using environment variables (for local development)
        # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY should be set as env vars
        client = boto3.client('s3', region_name='us-east-1')

        # Or, using AWS Secrets Manager
        import json

        def get_aws_credentials():
            secrets_client = boto3.client('secretsmanager', region_name='us-east-1')
            secret = secrets_client.get_secret_value(SecretId='my-aws-credentials')
            return json.loads(secret['SecretString'])

        creds = get_aws_credentials()
        client = boto3.client(
            's3',
            aws_access_key_id=creds['access_key_id'],
            aws_secret_access_key=creds['secret_access_key'],
            region_name='us-east-1'
        )

    - language: javascript
      insecure: |
        // INSECURE - Hardcoded AWS credentials
        const AWS = require('aws-sdk');

        AWS.config.update({
          accessKeyId: 'AKIAIOSFODNN7EXAMPLE',
          secretAccessKey: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
          region: 'us-east-1'
        });

        const s3 = new AWS.S3();

      secure: |
        // SECURE - Using IAM role or environment variables
        const AWS = require('aws-sdk');

        // Will automatically use IAM role or env variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
        AWS.config.update({ region: 'us-east-1' });
        const s3 = new AWS.S3();

        // Or, using AWS Secrets Manager
        const secretsManager = new AWS.SecretsManager({ region: 'us-east-1' });

        async function getAWSCredentials() {
          const data = await secretsManager.getSecretValue({
            SecretId: 'my-aws-credentials'
          }).promise();

          return JSON.parse(data.SecretString);
        }

        async function createS3Client() {
          const creds = await getAWSCredentials();
          return new AWS.S3({
            accessKeyId: creds.access_key_id,
            secretAccessKey: creds.secret_access_key,
            region: 'us-east-1'
          });
        }

    - language: java
      insecure: |
        // INSECURE - Hardcoded AWS credentials
        import com.amazonaws.auth.AWSStaticCredentialsProvider;
        import com.amazonaws.auth.BasicAWSCredentials;
        import com.amazonaws.services.s3.AmazonS3;
        import com.amazonaws.services.s3.AmazonS3ClientBuilder;

        BasicAWSCredentials awsCreds = new BasicAWSCredentials(
            "AKIAIOSFODNN7EXAMPLE",
            "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
        );

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
            .withCredentials(new AWSStaticCredentialsProvider(awsCreds))
            .withRegion("us-east-1")
            .build();

      secure: |
        // SECURE - Using DefaultAWSCredentialsProviderChain
        import com.amazonaws.services.s3.AmazonS3;
        import com.amazonaws.services.s3.AmazonS3ClientBuilder;

        // Will use IAM role, environment variables, or ~/.aws/credentials
        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
            .withRegion("us-east-1")
            .build();

references:
  - "https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html"
  - "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"
  - "https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html"
  - "https://cwe.mitre.org/data/definitions/798.html"
  - "https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password"

test_cases:
  - should_trigger: true
    code: |
      aws_access_key_id = "AKIAI44QH8DHBEXAMPLE"
      aws_secret_access_key = "je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY"
    description: "Hardcoded AWS credentials"

  - should_trigger: true
    code: |
      boto3.client('s3',
          aws_access_key_id='AKIAIOSFODNN7EXAMPLE',
          aws_secret_access_key='wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
      )
    description: "AWS credentials in boto3 client initialization"

  - should_trigger: false
    code: |
      # Using environment variables - SECURE
      boto3.client('s3', region_name='us-east-1')
    description: "Using default credential chain (secure)"

  - should_trigger: false
    code: |
      # Example from AWS documentation
      aws_access_key_id = "AKIAIOSFODNN7EXAMPLE"  # This is the example key from AWS docs
    description: "AWS documentation example key"

created: 2024-01-15
author: Security Team
last_updated: 2024-01-15
version: 1.0.0
status: active
tags:
  - aws
  - credentials
  - secrets
  - cloud
  - iam
