// Example of Cross-Site Scripting (XSS) Vulnerabilities
// This file demonstrates common XSS patterns for testing security reviews

// INSECURE EXAMPLE 1: Direct innerHTML assignment
function displayUserGreeting_insecure(username) {
    // VULNERABILITY: User input directly into innerHTML
    // Attacker could input: <script>alert('XSS')</script>
    document.getElementById('greeting').innerHTML = 'Hello ' + username;
}

// INSECURE EXAMPLE 2: document.write with user input
function showWelcomeMessage_insecure(message) {
    // VULNERABILITY: document.write with unsanitized input
    document.write('<h1>Welcome: ' + message + '</h1>');
}

// INSECURE EXAMPLE 3: eval with user input
function executeUserCode_insecure(code) {
    // VULNERABILITY: eval() with user-controlled input
    eval(code);
}

// INSECURE EXAMPLE 4: jQuery html() with user input
function displayComment_insecure(comment) {
    // VULNERABILITY: jQuery html() without escaping
    $('#comments').html('<div class="comment">' + comment + '</div>');
}

// INSECURE EXAMPLE 5: React dangerouslySetInnerHTML
function UserProfile_insecure({ bio }) {
    // VULNERABILITY: dangerouslySetInnerHTML with user content
    return (
        <div dangerouslySetInnerHTML={{ __html: bio }} />
    );
}

// INSECURE EXAMPLE 6: URL parameter in href
function createProfileLink_insecure(userId) {
    // VULNERABILITY: javascript: URL possible
    // Attacker could pass: javascript:alert('XSS')
    return '<a href="' + userId + '">View Profile</a>';
}

// INSECURE EXAMPLE 7: Event handler with user input
function attachClickHandler_insecure(action) {
    // VULNERABILITY: onclick attribute with unsanitized input
    document.getElementById('button').setAttribute('onclick', action);
}

// SECURE EXAMPLES (for comparison)

// SECURE: Using textContent instead of innerHTML
function displayUserGreeting_secure(username) {
    // SECURE: textContent automatically encodes HTML
    document.getElementById('greeting').textContent = 'Hello ' + username;
}

// SECURE: DOM methods instead of innerHTML
function displayComment_secure(comment) {
    // SECURE: createElement and textContent
    const commentDiv = document.createElement('div');
    commentDiv.className = 'comment';
    commentDiv.textContent = comment;
    document.getElementById('comments').appendChild(commentDiv);
}

// SECURE: HTML escaping function
function escapeHTML(str) {
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}

function displayHTML_secure(userInput) {
    // SECURE: Escape HTML before inserting
    const escaped = escapeHTML(userInput);
    document.getElementById('content').innerHTML = escaped;
}

// SECURE: React with proper escaping
function UserProfile_secure({ bio }) {
    // SECURE: React automatically escapes content in JSX
    return (
        <div>
            <p>{bio}</p>
        </div>
    );
}

// SECURE: URL validation
function createProfileLink_secure(userId) {
    // SECURE: Validate and sanitize URL
    const safeUserId = encodeURIComponent(userId);
    return `<a href="/profile/${safeUserId}">View Profile</a>`;
}

// SECURE: Event listener instead of onclick
function attachClickHandler_secure(callback) {
    // SECURE: addEventListener with function reference
    document.getElementById('button').addEventListener('click', callback);
}
